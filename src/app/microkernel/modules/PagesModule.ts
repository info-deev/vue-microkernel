import type { Microkernel } from '../classes/Microkernel.class'
import type { Event, Module } from '../types/types'

import { defineStore } from 'pinia'
import { ref } from 'vue'
import router from '@/app/router'
import type { RouteRecordRaw } from 'vue-router'

import moduleExistenceChecking from '../middleware/moduleExistenceChecking.middleware'
import type { Scheduler } from '../classes/Scheduler.class'
import { useRoutesStore } from '@/app/stores/routes'

export interface IPModule {
  id: string
  label?: string
  routes?: RouteRecordRaw[]
  beforeMounted?: Function
  afterMounted?: Function
}

export const usePagesModuleStore = defineStore('PagesModuleStore', () => {
  const modules = ref<string[]>([])

  return { modules }
})

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, –ø—Ä–∏–Ω–∏–º–∞—é—â–µ–π —Ü–µ–ª–µ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏ –º–∞—Å—Å–∏–≤ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
 * @param targetFunction
 * @param middlewareFunctions
 * @returns
 */
function applyMiddleware(
  targetFunction: Function,
  middlewareFunctions: Function[],
) {
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–¥ —Ü–µ–ª–µ–≤–æ–π
  return function (...args: any) {
    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    for (const middleware of middlewareFunctions) {
      const result = middleware(...args) // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç

      if (!result) {
        return // –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
      }
    }
    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É
    return targetFunction(...args)
  }
}

function isLocalhost() {
  const localhost = ['localhost', '127.0.0.1']
  return localhost.includes(location.hostname)
}

// –ü—Ä–∏–º–µ—Ä PagesModule –º–æ–¥—É–ª—è
export default class PagesModule implements Module {
  name = 'PagesModule'
  store = usePagesModuleStore()
  middlewares = [moduleExistenceChecking]

  init(microkernel: Microkernel): void {}
  run(microkernel: Microkernel): void {
    microkernel.publish('log' as Event, `${this.name} –∑–∞–ø—É—â–µ–Ω`)

    const scheduler = microkernel.getState('scheduler') as Scheduler
    const routesStore = useRoutesStore()

    if (scheduler) {
      scheduler.scheduleAt(new Date(Date.now() + 10000), () => {
        this.connectingModules()
        routesStore.setRoutes(router.getRoutes())
      })
    } else {
      this.connectingModules()
      routesStore.setRoutes(router.getRoutes())
    }
  }

  receiveData(data: any): void {
    console.log(`PagesModule –ø–æ–ª—É—á–∏–ª –¥–∞–Ω–Ω—ã–µ: ${data}`)
  }

  connectingModules = () => {
    const runPageModule = applyMiddleware(this.addModule, this.middlewares)
    const modules = import.meta.glob('@/modules/*/index.ts', {
      eager: true,
    })

    for (const path in modules) {
      const module: any = modules[path]
      // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      runPageModule(module.default)
    }
  }

  addModule = (pModule: IPModule) => {
    if (!pModule.id) {
      console.warn('–ú–æ–¥—É–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω: –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –º–æ–¥—É–ª—è.')
      return
    }

    if (isLocalhost()) {
      console.group('üü¢ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è:', `"${pModule.label || pModule.id}"`)
    }

    // –°—Ç–∞—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ beforeMounted
    if (pModule.beforeMounted && typeof pModule.beforeMounted === 'function') {
      if (isLocalhost()) {
        console.log('–°—Ç–∞—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ beforeMounted –º–æ–¥—É–ª—è')
      }
      pModule.beforeMounted()
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ—É—Ç–æ–≤ –º–æ–¥—É–ª—è
    if (router && pModule.routes) {
      if (isLocalhost()) {
        console.log('–°—Ç–∞—Ä—Ç –∏–º–ø–æ—Ä—Ç–∞ —Ä–æ—É—Ç–æ–≤ –º–æ–¥—É–ª—è')
      }

      pModule.routes.forEach(route => {
        if (isLocalhost()) {
          console.log(route)
        }

        router?.addRoute(route)
      })
    }

    this.store.modules.push(pModule.id)

    // –°—Ç–∞—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ afterMounted
    if (pModule.afterMounted && typeof pModule.afterMounted === 'function') {
      if (isLocalhost()) {
        console.log('–°—Ç–∞—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ afterMounted –º–æ–¥—É–ª—è')
      }
      pModule.afterMounted()
    }

    if (isLocalhost()) {
      console.groupEnd()
    }
  }
}
